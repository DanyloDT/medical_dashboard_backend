{
  "openapi": "3.0.0",
  "info": {
    "title": "Medical Dashboard API",
    "description": "This is a simple API for medical dashboard",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://medicaldashboard-backend.onrender.com",

      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Operations related to user authentication and authorization"
    },
    {
      "name": "Customers",
      "description": "Operations related to customers in the system"
    },
    {
      "name": "Transactions",
      "description": "Operations related to financial transactions"
    },
    {
      "name": "Products",
      "description": "Operations related to products in the system"
    },
    {
      "name": "Suppliers",
      "description": "Operations related to suppliers in the system"
    },
    {
      "name": "Orders",
      "description": "Operations related to orders in the system"
    }
  ],
  "paths": {
    "/api/auth/user/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User signup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user already exists"
          }
        }
      }
    },
    "/api/auth/user/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User signin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password"
          }
        }
      }
    },
    "/api/auth/user/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid or expired refresh token"
          }
        }
      }
    },
    "/api/auth/user/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user information",
        "responses": {
          "200": {
            "description": "User info retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/auth/user/signout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Sign out current user",
        "responses": {
          "200": {
            "description": "User signed out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Signout success"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/customers": {
      "get": {
        "tags": ["Customers"],
        "summary": "List all customers",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 5
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 12
                    },
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "pages": {
                      "type": "integer",
                      "example": 3
                    },
                    "limit": {
                      "type": "integer",
                      "example": 5
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create a new customer",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          }
        ],
        "requestBody": {
          "description": "Customer to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        }
      }
    },
    "/api/customers/{id}": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get a customer by id",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the customer to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "put": {
        "tags": ["Customers"],
        "summary": "Update a customer by id",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "delete": {
        "tags": ["Customers"],
        "summary": "Delete a customer by id",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer deleted"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/api/transactions": {
      "get": {
        "tags": ["Transactions"],
        "summary": "List all transactions",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 5
            },
            "required": false,
            "description": "Number of transactions per page"
          },
          {
            "in": "query",
            "name": "filterQuery",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Query string to filter transactions"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionArrayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a new transaction",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/transactions/{id}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get a transaction by its ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["Transactions"],
        "summary": "Update a transaction by its ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found"
          },
          "400": {
            "description": "Invalid request body"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete a transaction by its ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction deleted successfully"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "tags": ["Products"],
        "summary": "List all products",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 5
            },
            "description": "Number of products per page"
          },
          {
            "name": "filterQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Query string to filter products"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "Add a new product",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Find product by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of product to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": ["Products"],
        "summary": "Update an existing product",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of product to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Deletes a product",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/suppliers": {
      "get": {
        "tags": ["Suppliers"],
        "summary": "List all suppliers",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 5
            },
            "description": "Number of suppliers per page"
          },
          {
            "name": "filterQuery",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Query string to filter suppliers"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Supplier"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Suppliers"],
        "summary": "Add a new supplier",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplierInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Supplier added successfully"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      }
    },
    "/api/suppliers/{id}": {
      "get": {
        "tags": ["Suppliers"],
        "summary": "Get supplier by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of supplier to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found"
          }
        }
      },
      "put": {
        "tags": ["Suppliers"],
        "summary": "Update an existing supplier",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of supplier that needs to be updated"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplierInput"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Supplier not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": ["Suppliers"],
        "summary": "Deletes a supplier",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of supplier to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier deleted"
          },
          "404": {
            "description": "Supplier not found"
          }
        }
      }
    },
    "/api/orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "List all orders",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 5
            },
            "description": "Number of orders per page"
          },
          {
            "name": "filterQuery",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Query string to filter orders"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Orders"],
        "summary": "Create a new order",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get order by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of order to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": ["Orders"],
        "summary": "Update an existing order",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of order that needs to be updated"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": ["Orders"],
        "summary": "Delete an order",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AuthorizationHeader"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of order to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Order deleted"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },

  "components": {
    "parameters": {
      "AuthorizationHeader": {
        "name": "Authorization",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "default": "Bearer "
        },
        "description": "Access token required to authenticate the request"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "UserSignup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["name", "email", "password"]
      },
      "UserSignin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["email", "password"]
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": ["refreshToken"]
      },
      "Customer": {
        "type": "object",
        "required": [
          "name",
          "email",
          "spent",
          "phone",
          "address",
          "register_date"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The auto-generated id of the customer"
          },
          "image": {
            "type": "string",
            "format": "url",
            "description": "The URL of the customer's image"
          },
          "name": {
            "type": "string",
            "description": "The name of the customer"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the customer"
          },
          "spent": {
            "type": "string",
            "description": "Total amount spent by the customer"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer"
          },
          "address": {
            "type": "string",
            "description": "The address of the customer"
          },
          "register_date": {
            "type": "string",
            "description": "The date when the customer was registered"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": ["name", "amount", "type"],
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "Transaction ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the transaction"
          },
          "amount": {
            "type": "string",
            "description": "Amount involved in the transaction"
          },
          "type": {
            "type": "string",
            "enum": ["Income", "Expense", "Error"],
            "description": "Type of transaction"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Transaction creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Transaction last update date"
          }
        }
      },
      "TransactionArrayResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 12
          },
          "page": {
            "type": "integer",
            "example": 1
          },
          "pages": {
            "type": "integer",
            "example": 3
          },
          "limit": {
            "type": "integer",
            "example": 5
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "TransactionInput": {
        "type": "object",
        "required": ["name", "amount", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the transaction"
          },
          "amount": {
            "type": "string",
            "description": "Amount involved in the transaction, as a string to support two decimal places"
          },
          "type": {
            "type": "string",
            "enum": ["Income", "Expense", "Error"],
            "description": "Type of transaction"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "name": {
            "type": "string",
            "example": "Paracetamol"
          },
          "suppliers": {
            "type": "string",
            "example": "Supplier A"
          },
          "stock": {
            "type": "string",
            "example": "100"
          },
          "price": {
            "type": "string",
            "example": "19.99"
          },
          "category": {
            "type": "string",
            "example": "Medicine"
          },
          "photo": {
            "type": "string",
            "example": "http://example.com/photo.jpg"
          }
        }
      },
      "ProductInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Paracetamol"
          },
          "suppliers": {
            "type": "string",
            "example": "Supplier A"
          },
          "stock": {
            "type": "string",
            "example": "100"
          },
          "price": {
            "type": "string",
            "example": "19.99"
          },
          "category": {
            "type": "string",
            "example": "Medicine"
          },
          "photo": {
            "type": "string",
            "example": "http://example.com/photo.jpg"
          }
        },
        "required": ["name", "suppliers", "stock", "price", "category"]
      },
      "Supplier": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "example": "Supplier A"
          },
          "address": {
            "type": "string",
            "example": "123 Main St"
          },
          "suppliers": {
            "type": "string",
            "example": "Product A, Product B"
          },
          "date": {
            "type": "string",
            "example": "January 1, 2020"
          },
          "amount": {
            "type": "string",
            "example": "1000.00"
          },
          "status": {
            "type": "string",
            "enum": ["Active", "Deactive"],
            "example": "Active"
          }
        },
        "required": ["name", "address", "suppliers", "date", "amount", "status"]
      },
      "SupplierInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Supplier A"
          },
          "address": {
            "type": "string",
            "example": "123 Main St"
          },
          "suppliers": {
            "type": "string",
            "example": "Product A, Product B"
          },
          "date": {
            "type": "string",
            "example": "January 1, 2020"
          },
          "amount": {
            "type": "string",
            "example": "1000.00"
          },
          "status": {
            "type": "string",
            "enum": ["Active", "Deactive"],
            "example": "Active"
          }
        },
        "required": ["name", "address", "suppliers", "date", "amount", "status"]
      },
      "Order": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "5e9f8f8f8f8f8f8f8f8f8f8"
          },
          "photo": {
            "type": "string",
            "example": "http://example.com/photo.jpg"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Anytown, AN"
          },
          "products": {
            "type": "string",
            "example": "10"
          },
          "order_date": {
            "type": "string",
            "example": "January 1, 2020"
          },
          "price": {
            "type": "string",
            "example": "150.00"
          },
          "status": {
            "type": "string",
            "example": "Completed",
            "enum": [
              "Completed",
              "Confirmed",
              "Pending",
              "Cancelled",
              "Processing",
              "Shipped",
              "Delivered"
            ]
          }
        },
        "required": ["name", "address", "products", "price", "status"]
      },
      "OrderInput": {
        "type": "object",
        "properties": {
          "photo": {
            "type": "string",
            "example": "http://example.com/photo.jpg"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Anytown, AN"
          },
          "products": {
            "type": "string",
            "example": "10"
          },
          "order_date": {
            "type": "string",
            "example": "January 1, 2020"
          },
          "price": {
            "type": "string",
            "example": "150.00"
          },
          "status": {
            "type": "string",
            "example": "Completed"
          }
        },
        "required": ["name", "address", "products", "price", "status"]
      }
    }
  }
}
